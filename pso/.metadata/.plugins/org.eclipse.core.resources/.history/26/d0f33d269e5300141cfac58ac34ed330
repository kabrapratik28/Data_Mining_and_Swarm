package graph_clustering;

import java.util.*;
import java.util.Arrays; 
import java.util.Vector;
import Jama.Matrix;
import Jama.EigenvalueDecomposition;

public class graphdata {
	
	Vector<Vector<Float>> nodes_linkage_graph ; 
    Vector<Float> eigen_value ; 
    Vector<Vector<Float>> eigen_vector ; 
	
    Vector<Float> sorted_eigen_value ; 
    Vector<Vector<Float>> sorted_eigen_vector ;
    
   
    
    Matrix graph_matrix_jama ; 
    EigenvalueDecomposition eigen_values_of_matrix ; 
    double [] eigen_values_jama ; 
    double [][] eigen_vectors_jama ; 
    
	public graphdata(double[][] graph_matrix_array)
	{
		//apply some java eigen value package here 
		//to calculate eigen value and vector
		//pass to sort egen valu and vector
		//pass to extract positive eigen value and respective vector

		graph_matrix_jama = new Matrix(graph_matrix_array);
		eigen_values_of_matrix = new EigenvalueDecomposition(graph_matrix_jama) ;
		eigen_values_jama = eigen_values_of_matrix.getRealEigenvalues() ;
		eigen_vectors_jama = eigen_values_of_matrix.getV().getArray() ; 
		eigen_value = new Vector<Float>() ; 
		eigen_vector = new Vector<Vector<Float>>();
		
		//getting +ve eigen vectors
		for (int count_eigen_value = 0 ; count_eigen_value < eigen_values_jama.length ; count_eigen_value++)
		{
			if(eigen_values_jama[count_eigen_value] > 0)
			{
				eigen_value.add((float)eigen_values_jama[count_eigen_value]);
				Vector<Float> eigen_vector_for_eigen_value = new Vector<Float>();
				for(int count_row_eigen_vec=0 ; count_row_eigen_vec < eigen_vectors_jama.length ; count_row_eigen_vec++)
				{
					eigen_vector_for_eigen_value.add((float)eigen_vectors_jama[count_row_eigen_vec][count_eigen_value]);
				}
				eigen_vector.add(eigen_vector_for_eigen_value);
			}
		}
		
		//sorted eigen values and vectors
		sorted_eigen_value = new Vector<Float>() ; 
		sorted_eigen_vector = new Vector<Vector<Float>>();
		sort_eigen_value_eigen_vector_in_descending_order() ; 
	}

	public void sort_eigen_value_eigen_vector_in_descending_order()
	{
		int size_of_eigen_val = eigen_value.size() ; 
		for (int count_eigen_vec = 0 ; count_eigen_vec < size_of_eigen_val ; count_eigen_vec++)
		{
			 Object maximum_value_obj = Collections.max(eigen_value);
			 float maximum_value  = (float)maximum_value_obj ; 
			 sorted_eigen_value.add(maximum_value);
			 sorted_eigen_vector.add(eigen_vector.get(eigen_value.indexOf(maximum_value_obj)));
		}
	}
	
	public Vector<Float> get_sorted_eigen_value()
	{
		return sorted_eigen_value ; 
	}
	
	public Vector<Vector<Float>> get_sorted_eigen_vector()
	{
		return sorted_eigen_vector ; 
	}
		
	public Vector<Vector<Float>> get_graph_matrix()
	{
		return graph_matrix ; 
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	    Vector<Double> v = new Vector<Double>();
	    v.add(new Double("3.4"));
	    v.add(new Double("3.1113"));
	    v.add(new Double("4.4"));
	    v.add(new Double("0.3"));
	    v.add(new Double("3.011"));
	    Object obj = Collections.max(v);
	    double c = (double)obj ; 
	    System.out.println(c);
	    System.out.println(v.indexOf(obj));
	    v.remove(v.indexOf(obj)) ;
	    obj = Collections.max(v);
	    c = (double)obj ; 
	    System.out.println(c);
	    System.out.println(v.indexOf(obj));
	    v.remove(v.indexOf(obj)) ;
	    System.out.println(v);
	}
	
}
