package graph_clustering;

import java.util.Random;
import java.util.Vector;

public class pso_on_graph {
	
	//only 2 values 
	//min max values in between particle intiated 
	Vector<Float> min_max_value ; 
	
	//Random Float generator
	Random random ; 
	
	public pso_on_graph(Vector<Float> sorted_eigen_value, Vector<Vector<Float>> sorted_eigen_vector)
	{
		// random no generator between 0 and 1
		random = new Random() ;
		
		//get min max limitation of first eigen vector
		min_max_value_for_particle(sorted_eigen_vector.get(0));
	}
	
	public Vector<Float> min_max_value_for_particle(Vector<Float> first_eigen_vector)
	{
		Vector<Float> min_max_value = new Vector<Float>() ;
		float min_value = Float.MAX_VALUE; 
		float max_value = Float.MIN_VALUE; 
		for (int counter_eigen_vector_values =0 ; counter_eigen_vector_values < first_eigen_vector.size() ; counter_eigen_vector_values++)
		{
			if (max_value < first_eigen_vector.get(counter_eigen_vector_values))
			{
				max_value = first_eigen_vector.get(counter_eigen_vector_values);
			}
			if (min_value > first_eigen_vector.get(counter_eigen_vector_values))
			{
				min_value = first_eigen_vector.get(counter_eigen_vector_values);
			}
		}
		min_max_value.add(min_value);
		min_max_value.add(max_value);
		return min_max_value ; 
	}
	
	//max_number_of_communities == number of +ve eigen vector
	//no of +ve eigen vector passed above 
	public Vector<Vector<Float>> give_random_particles()
	{
		Vector<Vector<Float>> paticles_of_swarm = new Vector<Vector<Float>>() ; 
		
		return paticles_of_swarm ; 
	}

	// same as swarm.random_particle generator
	float random_no_giver_in_range(float min_value , float max_value)
	{
		float new_random_number_in_range = random.nextFloat() * (max_value-min_value) + min_value ; 
		return new_random_number_in_range ; 
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
