package graph_clustering;

import java.util.Vector;

import swarm.particle;
import swarm.settings;
import swarm.swarm_based_clustering;

public class graph_particle {
	
	Vector< Float > current_location ;  // now current velocity
	Vector< Float > current_velocity ;  // now current velocity
	
	float pbest ;  
	Vector< Float > pbest_position ;  // all dimension value for pbest value
	
	/*
	 * set after all particle value calculated
	 * initialization after all particle calculated
	 */
	static float gbest ; 
	static Vector< Float > gbest_position ;  
	
	//for every particle make community out of graph centroids and fitness function for this particle 
	static graph_make_communities graph_make_communities_obj ; 
	static community_fitness_function community_fitness_function_obj ; 
	
	static settings setting_for_all ;  // setting for all particles (inertia, c1, c2 , no of cluster , dimension ,etc)
	static Vector< Vector<Float> > min_max_values ; // requires at boundary wrapping for all particle 
	
	
	//When object initializes position and velocity initial values set 
	public graph_particle(Vector< Float > intial_values ,Vector< Float > intial_velocities  )
	{
		current_location = new Vector<Float>();
		graph_particle.copy_vector_inside_vector(intial_values, current_location);
		
		current_velocity = new Vector< Float > ();
		graph_particle.copy_vector_inside_vector(intial_velocities, current_velocity) ; 
		
		/*
		 * set pbest
		 */
		pbest_position = new Vector<Float > (); //copy same dimension to pbest_position bz its for first time
		
		// make communities out of current pbest position
		graph_make_communities_obj.graph_cluster_at_every_pso_iteration(current_location) ; 
		graph_particle.copy_vector_inside_vector(graph_make_communities_obj.get_particle_new_position(),pbest_position) ;
		
		//fitness function passed value of centroids and elements
		community_fitness_function_obj.fitness_function_calculate_for_community(graph_make_communities_obj.get_centroid_no_to_element_vec());
		pbest = community_fitness_function_obj.get_Q_value() ; 
	}
	
	public float get_pbest_value()
	{
		return pbest ; 
	}
	
	public Vector<Float> get_pbest_position()
	{
		return pbest_position ; 
	}
	
	
	
	
	//taken from swarm.particle last function in same project another package
	public static void copy_vector_inside_vector(Vector<Float> src_vec ,Vector<Float> des_vec )
	{
			for(int count_dime=0 ; count_dime < src_vec.size() ; count_dime++)
			{
				des_vec.add(src_vec.get(count_dime));
			}
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
