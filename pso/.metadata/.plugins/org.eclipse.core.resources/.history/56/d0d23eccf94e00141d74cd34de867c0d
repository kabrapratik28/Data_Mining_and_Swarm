package graph_clustering;

import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

public class dissimilarity_i_j_node {
	//set eigen values and eigen vectors
	Vector<Float> eigen_values ; 
	Vector< Vector<Float> > eigen_vector ;
	
	//first selected (no of centroids -1) eigen value and eigen vector  are sended
	public dissimilarity_i_j_node(Vector<Float> eigen_values, Vector< Vector<Float> > eigen_vector)
	{
		if (eigen_values.size() != eigen_vector.size())
		{
			System.out.println("Error : eigen Value and eigen Vector size are not same. ");
		}
		else 
		{
			this.eigen_values = eigen_values ;
			this.eigen_vector = eigen_vector ;
		}
	}
	

	//return nodes which are closer to each other in graph matrix 
	// map of centroid number and respective vector sends
	public Map<Integer, Vector<Integer>>  community_find_out_of_given_centroid(Vector<Integer> centroid_number_in_graph)
	{
		Map<Integer, Vector<Integer>> centroid_no_to_element_vec = new HashMap<Integer, Vector<Integer>>();
		for (int centroid_counter = 0 ; centroid_counter < centroid_number_in_graph.size() ; centroid_counter++ )
		{
			
		}
		return centroid_no_to_element_vec ; 
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Map<Integer, Vector<Integer>> centroid_no_to_element_vec = new HashMap<Integer, Vector<Integer>>();
		
		centroid_no_to_element_vec.put(1, new Vector<Integer>() );
		centroid_no_to_element_vec.get(1).add(2) ; 
		centroid_no_to_element_vec.get(1).add(3) ; 
		System.out.println(centroid_no_to_element_vec.get(1));
		
	}

}
